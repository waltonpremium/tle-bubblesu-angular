/**
 * Created by JohnMak on 28/11/15.
 */

(function ($) {
    // Detect touch support
    $.support.touch = 'ontouchend' in document;
    // Ignore browsers without touch support
    if (!$.support.touch) {
        return;
    }
    var mouseProto = $.ui.mouse.prototype,
        _mouseInit = mouseProto._mouseInit,
        touchHandled;

    function simulateMouseEvent (event, simulatedType) { //use this function to simulate mouse event
        // Ignore multi-touch events
        if (event.originalEvent.touches.length > 1) {
            return;
        }
        event.preventDefault(); //use this to prevent scrolling during ui use

        var touch = event.originalEvent.changedTouches[0],
            simulatedEvent = document.createEvent('MouseEvents');
        // Initialize the simulated mouse event using the touch event's coordinates
        simulatedEvent.initMouseEvent(
            simulatedType,    // type
            true,             // bubbles
            true,             // cancelable
            window,           // view
            1,                // detail
            touch.screenX,    // screenX
            touch.screenY,    // screenY
            touch.clientX,    // clientX
            touch.clientY,    // clientY
            false,            // ctrlKey
            false,            // altKey
            false,            // shiftKey
            false,            // metaKey
            0,                // button
            null              // relatedTarget
        );

        // Dispatch the simulated event to the target element
        event.target.dispatchEvent(simulatedEvent);
    }
    mouseProto._touchStart = function (event) {
        var self = this;
        // Ignore the event if another widget is already being handled
        if (touchHandled || !self._mouseCapture(event.originalEvent.changedTouches[0])) {
            return;
        }
        // Set the flag to prevent other widgets from inheriting the touch event
        touchHandled = true;
        // Track movement to determine if interaction was a click
        self._touchMoved = false;
        // Simulate the mouseover event
        simulateMouseEvent(event, 'mouseover');
        // Simulate the mousemove event
        simulateMouseEvent(event, 'mousemove');
        // Simulate the mousedown event
        simulateMouseEvent(event, 'mousedown');
    };

    mouseProto._touchMove = function (event) {
        // Ignore event if not handled
        if (!touchHandled) {
            return;
        }
        // Interaction was not a click
        this._touchMoved = true;
        // Simulate the mousemove event
        simulateMouseEvent(event, 'mousemove');
    };
    mouseProto._touchEnd = function (event) {
        // Ignore event if not handled
        if (!touchHandled) {
            return;
        }
        // Simulate the mouseup event
        simulateMouseEvent(event, 'mouseup');
        // Simulate the mouseout event
        simulateMouseEvent(event, 'mouseout');
        // If the touch interaction did not move, it should trigger a click
        if (!this._touchMoved) {
            // Simulate the click event
            simulateMouseEvent(event, 'click');
        }
        // Unset the flag to allow other widgets to inherit the touch event
        touchHandled = false;
    };
    mouseProto._mouseInit = function () {
        var self = this;
        // Delegate the touch handlers to the widget's element
        self.element
            .on('touchstart', $.proxy(self, '_touchStart'))
            .on('touchmove', $.proxy(self, '_touchMove'))
            .on('touchend', $.proxy(self, '_touchEnd'));

        // Call the original $.ui.mouse init method
        _mouseInit.call(self);
    };
})(jQuery);
/**
 * Created by JohnMak on 17/12/15.
 */
(function ( $ ) {

    function find_angle(A,B,C) {
        return (Math.atan2(A.y - B.y, A.x - B.x) - Math.atan2(C.y - B.y, C.x - B.x))*180/Math.PI;
    }

    $.fn.touchrotate =  function(params, callback) {

    //// PREPARING PARAMETERS
        var frame = this;

        default_params = {
            handle: $(this),
            subject: $(this).children('div'),
            center_x:50,
            center_y:50
        };

        params = $.extend(true, default_params, params);

        params.handle = $(params.handle);

        var cur_angle = 0;
        var delta_prev_angle = 0;
        var delta_angle = 0;

        var drag_start_coord = {x:0,y:0};
        var obj_center_coord = {
            x:this.offset().left + this.width()*params.center_x/100,
            y:this.offset().top + this.height()*params.center_y/100
        };
        //$('body').append($('.touch_point'));
        //
        //$('#touch_point_center').css('top', obj_center_coord.y).css('left', obj_center_coord.x);

        var jq_body = $('body');


    //// MANIPULATING FUNCTIONS
        function rotate(newAngle) {
            params.subject.css('transform','rotate(' + newAngle + 'deg)');
        }

    //// EVENTS HANDLES

        function dragStart(e){
            bindMove();
            bindStop();
            stopInertia();
            drag_start_coord.x = e.pageX;
            drag_start_coord.y = e.pageY;
            if (typeof e.touches !== 'undefined'){
                drag_start_coord.x = e.touches[0].pageX;
                drag_start_coord.y = e.touches[0].pageY;
            }
            obj_center_coord = {
                x:frame.offset().left + frame.width()*params.center_x/100,
                y:frame.offset().top + frame.height()*params.center_y/100
            };
            delta_prev_angle = 0;
            delta_angle = 0;
            //$('#touch_point_center').css('top', obj_center_coord.y).css('left', obj_center_coord.x);
            //
            //$('#touch_point_start').css('top', drag_start_coord.y).css('left', drag_start_coord.x);
        }

        function dragMove(e){
            var touch_point = {
                x: e.pageX,
                y: e.pageY
            };
            if (typeof e.touches !== 'undefined'){
                touch_point.x = e.touches[0].pageX;
                touch_point.y = e.touches[0].pageY;
            }
            //$('#touch_point_touch').css('top', touch_point.y).css('left', touch_point.x);
            delta_prev_angle = delta_angle;
            delta_angle = find_angle(touch_point, obj_center_coord, drag_start_coord);

            rotate(cur_angle + delta_angle);


            e.stopPropagation();
            e.preventDefault();
        }

        function dragStop(e){
            cur_angle = cur_angle + delta_angle;
            if (callback) callback(cur_angle);
            startInertia(delta_angle-delta_prev_angle);
            unbindMove();
            unbindStop();
        }

        var inertia_interval = false;
        var inertia_power = 0;

        function startInertia(power) {
            inertia_power = power;

            inertia_interval = setInterval(processInertia, 20)
        }
        function processInertia() {
            cur_angle += inertia_power;
            rotate(cur_angle);

            inertia_power /= 1.07;
            if (Math.abs(inertia_power) < .1)
                stopInertia();
        }

        function stopInertia() {
            clearInterval(inertia_interval);
        }


    //// BINDING FUNCTIONS

        function bindStart(){
            params.handle.on('mousedown', dragStart);
            params.handle[0].addEventListener('touchstart', dragStart);
        }

        function unbindStart(){
            params.handle.off('mousedown', dragStart);
            params.handle[0].removeEventListener('touchstart', dragStart);
        }


        function bindMove(){
            jq_body.on('mousemove', dragMove);
            jq_body[0].addEventListener('touchmove', dragMove);
        }

        function unbindMove(){
            jq_body.off('mousemove', dragMove);
            jq_body[0].removeEventListener('touchmove', dragMove);
        }


        function bindStop(){
            jq_body.on('mouseup', dragStop);
            jq_body.on('mouseleave', dragStop);
            jq_body.on('touchend', dragStop);
            jq_body.on('touchcancel', dragStop);
        }

        function unbindStop(){
            jq_body.off('mouseup', dragStop);
            jq_body.off('mouseleave', dragStop);
            jq_body.off('touchend', dragStop);
            jq_body.off('touchcancel', dragStop);
        }



    //// INIT

        bindStart();
    };


}( jQuery ));
/*!
 * Scroll Lock v1.1.1
 * https://github.com/MohammadYounes/jquery-scrollLock
 *
 * Copyright (c) 2014 Mohammad Younes
 * Licensed under the MIT license.
 */
(function(n){typeof define=="function"&&define.amd?define(["jquery"],n):n(jQuery)})(function(n){function u(n){var t=n.prop("clientWidth"),i=n.prop("offsetWidth"),r=parseInt(n.css("border-right-width"),10),u=parseInt(n.css("border-left-width"),10);return t+u+r<i}var i="onmousewheel"in window?"ActiveXObject"in window?"wheel":"mousewheel":"DOMMouseScroll",t=".scrollLock",r=n.fn.scrollLock;n.fn.scrollLock=function(r,f,e){return typeof f!="string"&&(f=null),(r===undefined||r)&&r!=="off"?this.each(function(){n(this).on(i+t,f,function(t){var i,s;if(!t.ctrlKey&&(i=n(this),e===!0||u(i))){t.stopPropagation();var f=i.scrollTop(),h=i.prop("scrollHeight"),c=i.prop("clientHeight"),o=t.originalEvent.wheelDelta||-1*t.originalEvent.detail||-1*t.originalEvent.deltaY,r=0;t.type==="wheel"&&(s=i.height()/n(window).height(),r=t.originalEvent.deltaY*s);(o>0&&f+r<=0||o<0&&f+r>=h-c)&&(t.preventDefault(),r&&i.scrollTop(f+r))}})}):this.each(function(){n(this).off(t)})};n.fn.scrollLock.noConflict=function(){return n.fn.scrollLock=r,this}});
/*
//# sourceMappingURL=jquery-scrollLock.min.js.map
*/
//# sourceMappingURL=data:application/json;base64,
